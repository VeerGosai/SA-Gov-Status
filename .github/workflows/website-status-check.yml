name: Check Website Status

on:
  schedule:
    - cron: '*/30 * * * *'  # Runs every 30 minutes
  workflow_dispatch:  # Allows manual triggering of the workflow

permissions:
  contents: write  # This grants permission to write to the repository contents

jobs:
  check-status:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'  # Use Node.js 20

      - name: Install dependencies
        run: |
          npm install axios

      - name: Create and run check-status.js
        run: |
          echo "const fs = require('fs');" > check-status.js
          echo "const axios = require('axios');" >> check-status.js
          echo "" >> check-status.js
          echo "const sites = fs.readFileSync('sites.txt', 'utf-8').trim().split('\\n');" >> check-status.js
          echo "" >> check-status.js
          echo "const statusPromises = [];" >> check-status.js
          echo "" >> check-status.js
          echo "const checkWebsiteStatus = async (url, title) => {" >> check-status.js
          echo "    console.log(\`Checking status for: \${title} (\${url})\`);" >> check-status.js  # Log the site being checked
          echo "    try {" >> check-status.js
          echo "        const response = await axios.get(url);" >> check-status.js
          echo "        console.log(\`Website: \${title} - Status: \${response.status}\`);" >> check-status.js
          echo "        return \`Website: \${title} - Status: \${response.status}\`;" >> check-status.js
          echo "    } catch (error) {" >> check-status.js
          echo "        console.log(\`Website: \${title} - Status: Offline\`);" >> check-status.js
          echo "        return \`Website: \${title} - Status: Offline\`;" >> check-status.js
          echo "    }" >> check-status.js
          echo "};" >> check-status.js
          echo "" >> check-status.js
          echo "sites.forEach(line => {" >> check-status.js
          echo "    const [url, title] = line.split(',');" >> check-status.js
          echo "    if (url && title) {" >> check-status.js
          echo "        const trimmedUrl = url.trim();" >> check-status.js
          echo "        const trimmedTitle = title.trim();" >> check-status.js
          echo "        statusPromises.push(checkWebsiteStatus(trimmedUrl, trimmedTitle));" >> check-status.js
          echo "    }" >> check-status.js
          echo "});" >> check-status.js
          echo "" >> check-status.js
          echo "Promise.all(statusPromises)" >> check-status.js
          echo "    .then(results => {" >> check-status.js
          echo "        fs.writeFileSync('output.txt', results.join('\\n'), 'utf-8');" >> check-status.js
          echo "        console.log('Website statuses checked and saved to output.txt');" >> check-status.js
          echo "    })" >> check-status.js
          echo "    .catch(error => {" >> check-status.js
          echo "        console.error('Error checking website statuses:', error);" >> check-status.js
          echo "    });" >> check-status.js

      - name: Upload output.txt
        uses: actions/upload-artifact@v3
        with:
          name: website-status-results
          path: output.txt

      - name: Download previous output.txt
        uses: actions/download-artifact@v3
        with:
          name: website-status-results
          path: old-output.txt

      - name: Create compare-status.js
        run: |
          echo "const fs = require('fs');" > compare-status.js
          echo "" >> compare-status.js
          echo "// Read the new and old output files" >> compare-status.js
          echo "const newStatus = fs.readFileSync('output.txt', 'utf-8').trim().split('\\n');" >> compare-status.js
          echo "const oldStatus = fs.readFileSync('old-output.txt', 'utf-8').trim().split('\\n');" >> compare-status.js
          echo "" >> compare-status.js
          echo "const changes = [];" >> compare-status.js
          echo "const statusMap = {};" >> compare-status.js
          echo "" >> compare-status.js
          echo "// Process the old statuses" >> compare-status.js
          echo "oldStatus.forEach(line => {" >> compare-status.js
          echo "    const [title, status] = line.split(' - Status: ');" >> compare-status.js
          echo "    statusMap[title.trim()] = status.trim();" >> compare-status.js
          echo "});" >> compare-status.js
          echo "" >> compare-status.js
          echo "// Compare with new statuses" >> compare-status.js
          echo "newStatus.forEach(line => {" >> compare-status.js
          echo "    const [title, newStatus] = line.split(' - Status: ');" >> compare-status.js
          echo "    const oldStatus = statusMap[title.trim()];" >> compare-status.js
          echo "" >> compare-status.js
          echo "    if (oldStatus) {" >> compare-status.js
          echo "        if (oldStatus === 'Offline' && newStatus === 'Online') {" >> compare-status.js
          echo "            changes.push(\`\${title.trim()} changed from Offline to Online\`);" >> compare-status.js
          echo "        } else if (oldStatus === 'Online' && newStatus === 'Offline') {" >> compare-status.js
          echo "            changes.push(\`\${title.trim()} changed from Online to Offline\`);" >> compare-status.js
          echo "        }" >> compare-status.js
          echo "    } else {" >> compare-status.js
          echo "        // If the title was not found in the old status, it might be new" >> compare-status.js
          echo "        changes.push(\`\${title.trim()} is a new entry with status: \${newStatus}\`);" >> compare-status.js
          echo "    }" >> compare-status.js
          echo "});" >> compare-status.js
          echo "" >> compare-status.js
          echo "// Write changes to last_changes.txt" >> compare-status.js
          echo "fs.writeFileSync('last_changes.txt', changes.join('\\n'), 'utf-8');" >> compare-status.js
          echo "console.log('Changes written to last_changes.txt');" >> compare-status.js

      - name: Run compare-status.js
        run: node compare-status.js

      - name: Upload last_changes.txt
        uses: actions/upload-artifact@v3
        with:
          name: last-changes-results
          path: last_changes.txt

      - name: Configure Git
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"

      - name: Push output.txt and last_changes.txt
        run: |
          git add output.txt last_changes.txt
          git commit -m "Update website status results and changes"
          git push
